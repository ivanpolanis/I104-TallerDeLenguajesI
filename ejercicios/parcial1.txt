1.
posible
Linea = Nuevo texto
Linea = basura

2.
10 9 8 7 6

3.
#define nPares(x,y) !(x%2)+!(y%2)

4.
a.f
b.f
c.t
d.f
e.f
f.f
g.t
h.f
i.f
j.t

5.
struct destino {
  int codProv;
  int codLoc;
  char nomLoc[30];
  int nHab;
};

int main(){
  FILE *f = fopen("Habiatantes.txt","r");
  if(f == NULL)
    return 1;
  procesar(f);
  imprimir(calcular());
  return 0;
}

void procesar(FILE *f){
  FILE *b = fopen("Habitantes.dat", "w");
  if(b == NULL){
    exit(1);
  }
  char line[SIZE];
  struct destino localidad;
  while(fgets(line,SIZE,f) != null){
    sscanf(line, "%d %d %s %d\n", &localidad.codProv, &localidad.codLoc, localidad.nomLoc, &localidad.nHab);
    fwrite(localidad, sizeof(struct destino),1,b);
  }
  fclose(b);
}

struct destino calcular(){
  FILE *b = fopen("Habitantes.dat", "r");
  if(b==NULL){
    exit(1);
  }
  struct destino loc, max;
  max.nHab = -1;
  while(fread(loc, sizeof(struct destino),1,b) != 0){
    if(loc.nHab > max.nHab){
      max.nHab = loc.nHab;
      max.codProv = loc.codProv;
      max.codLoc = loc.codLoc;
      strcpy(max.nomLoc,loc.nomLoc);
    }
  }
  fclose(b);
  return max;
}

void mostrar(struct destino loc){
  printf("%d %s\n", loc.codLoc, loc.nomLoc);
}

6.

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv){
  if(argc == 1){
    printf("Error");
    return 1;
  }
  for(int i = 1; i < argc; i++){
    printf("%s ", argv[i]);
  }
  return 0;
}

7.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int *reservar(int n);
void inicializar(int * ptr, int n);
void imprimir(int *ptr, int n);

int main(){
  int n;
  scanf("%d", &n);
  int *ptr = reservar(n);
  inicializar(ptr, n);
  imprimir(ptr,n);
  return 0;
}

int *reservar(int n){
    int *ptr = (int *)malloc((n*(n+1)/2)*sizeof(int));
    return ptr;
}

void inicializar(int * ptr, int n){
    srand(time(NULL));
    for(int i = 0; i < (n*(n+1)/2); i++){
        ptr[i] = rand() % 21;
      }
}

void imprimir(int *ptr, int n){
  int pos = 0;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            if(j <= i)
                printf("%d ", ptr[pos + j + i]);
            else
                printf("0 ");
          }
        pos += i;
        printf("\n");
      }
  }

int *liberar(int *ptr){
    free(ptr);
    return NULL;
}

8.

#include <stdio.h>
#include <stdlib.h>

typedef struct nodo {
    int dato;
    struct nodo *siguiente;
  } lista;

int main(){

  }

void agregarNodo(lista *l, int n){
  struct nodo new;
  new.dato = n;
  new.siguiente = *l;
  *l = new;
  }

void eliminarNodo(lista *l, int n){
    struct nodo act, prox, ant;
    act = *l;
    prox = *l.siguiente;
    ant = *l;
    while(act != NULL && act.dato != n){
          ant = act;
          act = prox;
          prox = prox.siguiente;
      }
  }
